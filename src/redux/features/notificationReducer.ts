import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define interfaces for the state and notifications
interface Notification {
    _id: string;
    opened: boolean;
    [key: string]: any; // For other properties that may be in a notification
}

interface NotificationState {
    notifications: Notification[];
    isSoundOnOrOff: 'on' | 'off';
    unReadNotification: number | null;
}

const initialState: NotificationState = {
    notifications: [],
    isSoundOnOrOff: 'on',
    unReadNotification: null,
};

const notificationSlice = createSlice({
    name: 'notification',
    initialState,
    reducers: {
        setNotifications: (state, action: PayloadAction<Notification[]>) => {
            state.notifications = action.payload;
        },
        newNotification: (state, action: PayloadAction<Notification>) => {
            state.notifications = [action.payload, ...state.notifications];
            if (state.unReadNotification !== null) {
                state.unReadNotification = state.unReadNotification + 1;
            } else {
                state.unReadNotification = 1;
            }
            // state.notifications.unshift(action.payload);
        },
        updateNotification: (state, action: PayloadAction<Notification>) => {
            const index = state.notifications.findIndex(
                (n) => n._id === action.payload._id,
            );
            if (index !== -1) {
                state.notifications[index] = {
                    ...state.notifications[index],
                    opened: true,
                };
                state.unReadNotification =
                    state.unReadNotification !== null &&
                    state.unReadNotification > 0
                        ? state.unReadNotification - 1
                        : 0; // Decrement total notification number
            }
        },
        setUnReadNotification: (
            state,
            action: PayloadAction<number | null>,
        ) => {
            state.unReadNotification = action?.payload || 0;
        },
        setSound: (state, action: PayloadAction<'on' | 'off'>) => {
            state.isSoundOnOrOff = action.payload;
        },
    },
});

// Export actions generated by createSlice
export const {
    setNotifications,
    newNotification,
    updateNotification,
    setSound,
    setUnReadNotification,
} = notificationSlice.actions;

// Export the reducer
export default notificationSlice.reducer;
